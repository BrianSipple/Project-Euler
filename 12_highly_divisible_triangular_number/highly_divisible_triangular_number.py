"""
The sequence of triangle numbers is generated by adding
the natural numbers. So the 7th triangle number
would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to
have over five hundred divisors?
"""

from functools import reduce


def compute_nth_triangle(n):

    triangle_sum = lambda itr: reduce(lambda a,b: a+b, itr)
    return triangle_sum(range(1, n+1))


def compute_factors(n):

    return set(reduce(list.__add__,
            ([i, n//i] for i in range(1, int(n**.5) + 1) if n % i == 0)))


def num_factors_of_nth_triangle(n):
    return len(compute_factors((compute_nth_triangle(n))))


def find_min_triangle_num_with_divsor_length(length):

    if length > 0:
        current_base = 1
        #current_triangle = compute_nth_triangle(current_base)
        found = False

        while not found:
            factor_length = num_factors_of_nth_triangle(current_base)
            print("Current factor length of {}" \
                  " at nth-triangle {}".format(
                                            factor_length,
                                            current_base))

            if factor_length >= length:
                found = True
            else:
                current_base += 1

        triangle = compute_nth_triangle(current_base)

        return triangle





if __name__ == '__main__':
    #print(num_factors_of_nth_triangle(15))
    print(find_min_triangle_num_with_divsor_length(501))
    #print(compute_factors(15))
